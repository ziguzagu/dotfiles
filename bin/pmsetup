#!/usr/bin/env perl
use strict;
use warnings;
use ExtUtils::MakeMaker qw(prompt);
use File::Basename;
use File::Path;
use File::Spec;
use Text::Xslate;
use YAML;

my $path   = File::Spec->catfile($ENV{HOME}, "/.pmsetuprc");
my $config = eval { YAML::LoadFile($path) } || {};

my $save;
while (! $config->{author}) {
    $config->{author} = prompt("Your name: ", '');
    $save++;
}

while (! $config->{email}) {
    $config->{email} = prompt("Your email: ", '');
    $save++;
}

my $modname = shift @ARGV or die "Usage: $0 module\n";
   $modname =~ s/-/::/g;

write_plugin_files($modname, $config);

END {
    YAML::DumpFile($path, $config) if $save;
}

sub write_plugin_files {
    my($module, $config) = @_;

    # $module = "Foo::Bar"
    # $dist   = "Foo-Bar"
    # $path   = "Foo/Bar.pm"
    my @pkg  = split /::/, $module;
    my $dist = join "-", @pkg;
    my $path = join("/", @pkg) . ".pm";

    mkdir $dist, 0777;
    chdir $dist;

    my @template = YAML::Load(join '', <DATA>);
    my $vars = { module => $module, dist => $dist, path => $path,
                 config => $config, localtime => scalar localtime };

    for my $tmpl (@template) {
        my $file = $tmpl->{file};
           $file =~ s/(\$\w+)/$1/eeg;
        write_file($file, $tmpl->{template}, $vars);
    }

    !system "perl Makefile.PL" or die $?;
    !system 'make test' or die $?;
    !system 'make manifest' or die $?;
    !system 'make distclean' or die $?;
}

sub write_file {
    my($path, $template, $vars) = @_;

    if (-e $path) {
        my $ans = prompt("$path exists. Override? [yN] ", 'n');
        return if $ans !~ /[Yy]/;
    }

    my $dir = File::Basename::dirname($path);
    unless (-e $dir) {
        warn "Creating directory $dir\n";
        File::Path::mkpath($dir, 1, 0777);
    }

    my $tx = Text::Xslate->new(syntax => 'TTerse');
    my $content = $tx->render_string($template, $vars);

    warn "Creating $path\n";
    open my $out, ">", $path or die "$path: $!";
    print $out $content;
    close $out;
}

__DATA__
---
file: Makefile.PL
template: |
  use ExtUtils::MakeMaker;
  
  my $preop =
      'perldoc -uT $(VERSION_FROM) | tee $(DISTVNAME)/README.pod > README.pod;' .
      'pod2text README.pod | tee $(DISTVNAME)/README > README';
  
  WriteMakefile(
      NAME           => '[% module %]',
      AUTHOR         => '[% config.author %] <[% config.email %]>',
      LICENSE        => 'perl',
      VERSION_FROM   => 'lib/[% path %]',
      ABSTRACT_FROM  => 'lib/[% path %]',
      PREREQ_PM      => {},
      BUILD_REQUIRES => { 'Test::More' => 0.96 },
      dist           => { PREOP => $preop, },
      clean          => { FILES => 'README.pod' },
  );
---
file: t/00-compile.t
template: |
  use strict;
  use Test::More tests => 1;

  BEGIN { use_ok '[% module %]' }
---
file: xt/podspell.t
template: |
  use Test::More;
  eval q{ use Test::Spelling };
  plan skip_all => "Test::Spelling is not installed." if $@;
  add_stopwords(<DATA>);
  all_pod_files_spelling_ok('lib');
  __DATA__
  Hiroshi
  Sakai
---
file: xt/perlcritic.t
template: |
  use strict;
  use Test::More;
  eval q{ use Test::Perl::Critic };
  plan skip_all => "Test::Perl::Critic is not installed." if $@;
  all_critic_ok("lib");
---
file: xt/pod.t
template: |
  use Test::More;
  eval "use Test::Pod 1.00";
  plan skip_all => "Test::Pod 1.00 required for testing POD" if $@;
  all_pod_files_ok();
---
file: Changes
template: |
  Revision history for Perl extension [% module %]

  0.01  [% localtime %]
          - original version
---
file: lib/$path
template: |
  package [% module %];

  use strict;
  use warnings;

  our $VERSION = '0.01';

  1;

  =pod

  =head1 NAME

  [% module %] -

  =head1 SYNOPSIS

    use [% module %];

  =head1 DESCRIPTION

  [% module %] is

  =head1 SEE ALSO
      
  =head1 AUTHOR

  [% config.author %] E<lt>[% config.email %]E<gt>

  =head1 LICENSE

  This library is free software; you can redistribute it and/or modify
  it under the same terms as Perl itself.

  =cut
---
file: MANIFEST.SKIP
template: |
  \bRCS\b
  \bCVS\b
  \.svn/
  \.git/
  ^MANIFEST\.
  ^Makefile$
  ~$
  \.old$
  ^blib/
  ^pm_to_blib
  ^MakeMaker-\d
  \.gz$
  \.cvsignore
  \.gitignore
  \.shipit
---
file: .shipit
template: |
  steps = FindVersion, ChangeVersion, CheckChangeLog, DistTest, Commit, Tag, MakeDist, UploadCPAN
  git.tagpattern = %v
  git.push_to = origin
---
file: .gitignore
template: |
  MANIFEST
  MYMETA*
  Makefile*
  blib
  pm_to_blib
